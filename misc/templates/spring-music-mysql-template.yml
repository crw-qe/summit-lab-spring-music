apiVersion: v1
kind: Template
metadata:
  name: spring-music-mysql
  annotations:
    iconClass: icon-spring
    description: Application template for deploying the spring-music application on OpenShift using a MySQL backend
parameters:
  - name: SPRING_PROFILES_ACTIVE
    value: mysql
    description: The profiles to activate in the spring context
    required: true
  - name: APPLICATION_NAME
    value: spring-music
    description: The application name
    required: true
  - name: DATABASE_NAME
    value: music
    description: The name of the database to use
    required: true
  - name: DATABASE_USERNAME
    generate: expression
    from: '[\w]{32}'
    description: The database username
  - name: DATABASE_PASSWORD
    generate: expression
    from: '[\w]{32}'
    description: The database password
  - name: DATABASE_ROOT_PASSWORD
    generate: expression
    from: '[\w]{32}'
    description: The database root password
  - name: GITHUB_TRIGGER_SECRET
    generate: expression
    from: '[a-zA-Z0-9]{8}'
    description: GitHub trigger secret
  - name: GENERIC_TRIGGER_SECRET
    generate: expression
    from: '[a-zA-Z0-9]{8}'
    description: Generic build trigger secret
labels:
  createdBy: spring-music-mysql-template
  template: spring-music-mysql
objects:
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-db
      labels:
        application: ${APPLICATION_NAME}
      annotations:
        template.openshift.io/expose-database_name: '{.data[''database-name'']}'
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-root_password: '{.data[''database-root-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
    stringData:
      database-name: ${DATABASE_NAME}
      database-password: ${DATABASE_PASSWORD}
      database-root-password: ${DATABASE_ROOT_PASSWORD}
      database-user: ${DATABASE_USERNAME}
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-config
      labels:
        application: ${APPLICATION_NAME}
    data:
      spring.datasource.url: 'jdbc:mysql://${APPLICATION_NAME}-db:3306/${DATABASE_NAME}'
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: s2i-java
      labels:
        application: ${APPLICATION_NAME}
    spec:
      tags:
        - annotations:
            openshift.io/imported-from: fabric8/s2i-java
          from:
            kind: DockerImage
            name: fabric8/s2i-java
          name: latest
          referencePolicy:
            type: Source
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        application: ${APPLICATION_NAME}
    spec:
      tags:
        - name: latest
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        application: ${APPLICATION_NAME}
    spec:
      triggers:
        - type: Generic
          generic:
            secret: ${GENERIC_TRIGGER_SECRET}
        - type: GitHub
          github:
            secret: ${GITHUB_TRIGGER_SECRET}
        - type: ConfigChange
        - type: ImageChange
      source:
        type: Git
        git:
          ref: k8s
          uri: https://github.com/edeandrea/spring-music.git
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: s2i-java:latest
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-db
      labels:
        template: mysql-ephemeral-template
        application: ${APPLICATION_NAME}
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        name: ${APPLICATION_NAME}-db
      template:
        metadata:
          name: ${APPLICATION_NAME}-db
          labels:
            name: ${APPLICATION_NAME}-db
        spec:
          containers:
            - env:
                - name: MYSQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: database-user
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: database-password
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: database-root-password
                - name: MYSQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: database-name
              name: ${APPLICATION_NAME}-db
              image: rhscl/mysql-57-rhel7
              imagePullPolicy: IfNotPresent
              ports:
                - containerPort: 3306
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 3306
                timeoutSeconds: 1
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -i
                    - -c
                    - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                limits:
                  memory: 512Mi
              securityContext:
                privileged: false
              volumeMounts:
                - mountPath: /var/lib/mysql/data
                  name: ${APPLICATION_NAME}-db-data
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}-db
            from:
              kind: ImageStreamTag
              name: mysql:5.7
              namespace: openshift
        - type: ConfigChange
      volumes:
        - name: ${APPLICATION_NAME}-db-data
          emptyDir: {}
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-db
      labels:
        template: mysql-ephemeral-template
        application: ${APPLICATION_NAME}
    spec:
      ports:
        - name: mysql
          port: 3306
          protocol: TCP
          targetPort: 3306
      selector:
        name: ${APPLICATION_NAME}-db
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        deploymentconfig: ${APPLICATION_NAME}
        application: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        application: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}:latest
      template:
        metadata:
          labels:
            deploymentconfig: ${APPLICATION_NAME}
            application: ${APPLICATION_NAME}
        spec:
          containers:
            - name: ${APPLICATION_NAME}
              image: ${APPLICATION_NAME}
              ports:
                - containerPort: 8080
                  protocol: TCP
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: ${SPRING_PROFILES_ACTIVE}
                - name: SPRING_DATASOURCE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: database-user
                - name: SPRING_DATASOURCE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: database-password
                - name: SPRING_DATASOURCE_URL
                  valueFrom:
                    configMapKeyRef:
                      name: ${APPLICATION_NAME}-config
                      key: spring.datasource.url
              resources:
                requests:
                  memory: 512Mi
                  cpu: 100m
                limits:
                  memory: 1Gi
                  cpu: 500m
              readinessProbe:
                timeoutSeconds: 3
                initialDelaySeconds: 5
                httpGet:
                  path: /actuator/health
                  port: 8080
              livenessProbe:
                timeoutSeconds: 3
                initialDelaySeconds: 30
                httpGet:
                  path: /actuator/health
                  port: 8080
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        application: ${APPLICATION_NAME}
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
        - name: 8778-tcp
          port: 8778
          protocol: TCP
          targetPort: 8778
        - name: 9779-tcp
          port: 9779
          protocol: TCP
          targetPort: 9779
      selector:
        deploymentconfig: ${APPLICATION_NAME}
  - kind: Route
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        application: ${APPLICATION_NAME}
      annotations:
        description: Route for the applications http service
    spec:
      port:
        targetPort: 8080
      to:
        kind: Service
        name: ${APPLICATION_NAME}

