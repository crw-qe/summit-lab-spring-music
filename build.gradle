plugins {
	id "org.springframework.boot" version "2.1.3.RELEASE"
	id "io.spring.dependency-management" version "1.0.6.RELEASE"
	id "com.gorylenko.gradle-git-properties" version "2.0.0"
	id "com.palantir.docker" version "0.21.0"
	id 'java'
	id 'eclipse-wtp'
	id 'idea'
}

version = '1.0'
group = 'edeandrea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
	springCloudVersion = 'Greenwich.RELEASE'
}

repositories {
	mavenCentral()
	jcenter()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
	}
}

springBoot {
	buildInfo()
}

dependencies {
	annotationProcessor 'org.springframework:spring-context-indexer'
	
	// Spring Boot
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.springframework.boot:spring-boot-starter-actuator"
	compile "org.springframework.boot:spring-boot-starter-data-jpa"
	compile "org.springframework.boot:spring-boot-starter-data-mongodb"
	compile "org.springframework.boot:spring-boot-starter-data-redis"

	// Spring Cloud Connectors
	compile 'org.springframework.cloud:spring-cloud-starter-kubernetes'

	// JPA Persistence
	runtime "com.h2database:h2"
	runtime "mysql:mysql-connector-java"
	runtime "org.postgresql:postgresql"
	runtime "com.microsoft.sqlserver:mssql-jdbc"

	// Webjars
	compile "org.webjars:bootstrap:3.1.1"
	compile "org.webjars:angularjs:1.2.16"
	compile "org.webjars:angular-ui:0.4.0-2"
	compile "org.webjars:angular-ui-bootstrap:0.10.0-1"
	compile "org.webjars:jquery:2.1.0-2"

	// Oracle - uncomment one of the following after placing driver in ./libs
	// compile files('libs/ojdbc8.jar')
	// compile files('libs/ojdbc7.jar')

	// Testing
	testCompile "org.springframework.boot:spring-boot-starter-test"
	testCompile 'org.junit.jupiter:junit-jupiter-api'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine'
	testRuntime 'org.junit.vintage:junit-vintage-engine'
}

tasks.withType(Test) {
	useJUnitPlatform()
}

task printJavaVersion(type:  Exec) {
	commandLine './gradlew'
	args '-v'
}

build.finalizedBy printJavaVersion

task unpack(type: Copy) {
	dependsOn bootJar
	from zipTree(tasks.bootJar.outputs.files.singleFile)
	into "$buildDir/dependency"
}

docker {
	name "${project.group}/${project.name}"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}
